'use client';

import { useRouter } from 'next/navigation';
import { useState, useEffect } from 'react';
import { Club, AttendanceStatus } from '../../lib/types';

export default function Clubs() {
  const router = useRouter();
  const [clubs, setClubs] = useState<Club[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [formData, setFormData] = useState({
    displayName: '',
    status: 'unknown' as AttendanceStatus
  });
  const [deleteModal, setDeleteModal] = useState<{
    isOpen: boolean;
    clubIndex: number | null;
    clubName: string;
  }>({
    isOpen: false,
    clubIndex: null,
    clubName: ''
  });
  const [editModal, setEditModal] = useState<{
    isOpen: boolean;
    clubIndex: number | null;
    formData: { displayName: string; status: AttendanceStatus };
  }>({
    isOpen: false,
    clubIndex: null,
    formData: { displayName: '', status: 'unknown' }
  });
  const [copiedUid, setCopiedUid] = useState<string | null>(null);

  // Fetch clubs on component mount
  useEffect(() => {
    const fetchClubs = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await fetch('/api/clubs');
        
        if (!response.ok) {
          throw new Error(`Failed to fetch clubs: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (data.success && data.clubs) {
          setClubs(data.clubs);
        } else {
          throw new Error('Invalid response format');
        }
      } catch (err) {
        console.error('Error fetching clubs:', err);
        setError(err instanceof Error ? err.message : 'Failed to fetch clubs');
      } finally {
        setLoading(false);
      }
    };

    fetchClubs();
  }, []);

  const handleBack = () => {
    router.push('/dashboard');
  };

  const handleLogout = () => {
    // Clear any authentication state here if needed
    router.push('/');
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.displayName.trim()) return;

    // Generate temporary UID (would be auto-generated by API in real implementation)
    const tempUid = `club_${Date.now()}_${Math.random().toString(36).substring(2, 7)}`;

    const newClub: Club = {
      uid: tempUid,
      displayName: formData.displayName,
      safeName: formData.displayName.toLowerCase().replace(/\s+/g, '-'),
      meta: null,
      status: formData.status,
      created_at: new Date().toISOString(),
      updated_at: null
    };

    setClubs([...clubs, newClub]);
    setFormData({
      displayName: '',
      status: 'unknown'
    });
  };

  const handleDeleteClick = (index: number) => {
    const club = clubs[index];
    setDeleteModal({
      isOpen: true,
      clubIndex: index,
      clubName: `${club.displayName} - ${club.uid}`
    });
  };

  const handleDeleteConfirm = () => {
    if (deleteModal.clubIndex !== null) {
      setClubs(clubs.filter((_, i) => i !== deleteModal.clubIndex));
    }
    setDeleteModal({
      isOpen: false,
      clubIndex: null,
      clubName: ''
    });
  };

  const handleDeleteCancel = () => {
    setDeleteModal({
      isOpen: false,
      clubIndex: null,
      clubName: ''
    });
  };

  const handleEditClick = (index: number) => {
    const club = clubs[index];
    setEditModal({
      isOpen: true,
      clubIndex: index,
      formData: {
        displayName: club.displayName,
        status: club.status || 'unknown'
      }
    });
  };

  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setEditModal(prev => ({
      ...prev,
      formData: {
        ...prev.formData,
        [name]: value as AttendanceStatus
      }
    }));
  };

  const handleEditConfirm = () => {
    if (editModal.clubIndex !== null) {
      const updatedClubs = [...clubs];
      updatedClubs[editModal.clubIndex] = {
        ...updatedClubs[editModal.clubIndex],
        displayName: editModal.formData.displayName,
        safeName: editModal.formData.displayName.toLowerCase().replace(/\s+/g, '-'),
        status: editModal.formData.status,
        updated_at: new Date().toISOString()
      };
      setClubs(updatedClubs);
    }
    setEditModal({
      isOpen: false,
      clubIndex: null,
      formData: { displayName: '', status: 'unknown' }
    });
  };

  const handleEditCancel = () => {
    setEditModal({
      isOpen: false,
      clubIndex: null,
      formData: { displayName: '', status: 'unknown' }
    });
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    setCopiedUid(text);
    // Clear the copied state after 2 seconds
    setTimeout(() => {
      setCopiedUid(null);
    }, 2000);
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center">
              <h1 
                onClick={handleBack}
                className="text-3xl font-bold text-gray-900 dark:text-white cursor-pointer hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
              >
                Playfolio Admin Dashboard | Clubs
              </h1>
            </div>
            <button
              onClick={handleLogout}
              className="border border-red-900 text-red-900 hover:bg-red-900 hover:text-white px-4 py-2 rounded-md text-sm font-medium transition-colors cursor-pointer"
            >
              Logout
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          <div className="bg-white dark:bg-gray-800 shadow rounded-lg">
            <div className="px-4 py-5 sm:p-6">
              <h2 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
                Club Account Generation
              </h2>
              <p className="text-gray-600 dark:text-gray-400 mb-6">
                Generate and manage club accounts for the Playfolio platform.
              </p>

              {/* Club Generation Form */}
              <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                  <label htmlFor="displayName" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                    Club Name
                  </label>
                  <input
                    type="text"
                    id="displayName"
                    name="displayName"
                    value={formData.displayName}
                    onChange={handleInputChange}
                    required
                    className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white sm:text-sm"
                    placeholder="Enter club name (e.g., Frog Club, The Wolves)"
                  />
                </div>

                <div>
                  <label htmlFor="status" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                    Initial Status
                  </label>
                  <select
                    id="status"
                    name="status"
                    value={formData.status}
                    onChange={handleInputChange}
                    className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white sm:text-sm"
                  >
                    <option value="unknown">Unknown</option>
                    <option value="present">Present</option>
                    <option value="absent">Absent</option>
                    <option value="banned">Banned</option>
                    <option value="inactive">Inactive</option>
                  </select>
                </div>

                <div className="flex justify-end">
                  <button
                    type="submit"
                    className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors cursor-pointer"
                  >
                    Create Club
                  </button>
                </div>
              </form>

              {/* Existing Clubs List */}
              <div className="mt-8">
                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
                  Existing Clubs
                </h3>
                
                {loading ? (
                  <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                    <p className="text-gray-600 dark:text-gray-400 text-center">
                      Loading clubs...
                    </p>
                  </div>
                ) : error ? (
                  <div className="bg-red-50 dark:bg-red-900/20 rounded-lg p-4">
                    <p className="text-red-600 dark:text-red-400 text-center">
                      Error: {error}
                    </p>
                  </div>
                ) : clubs.length === 0 ? (
                  <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                    <p className="text-gray-600 dark:text-gray-400 text-center">
                      No clubs found. Create your first club above.
                    </p>
                  </div>
                ) : (
                  <div className="bg-white dark:bg-gray-800 shadow rounded-lg overflow-hidden">
                    <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                      <thead className="bg-gray-50 dark:bg-gray-700">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            Club Name
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            UID
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            Status
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            Created
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            Actions
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                        {clubs && clubs.map((club, index) => (
                          <tr key={index} className="hover:bg-blue-50 dark:hover:bg-blue-900/20">
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
                              {club.displayName}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 font-mono">
                              <div className="flex items-center space-x-2">
                                <span>{club.uid}</span>
                                <button
                                  onClick={() => copyToClipboard(club.uid)}
                                  className={`p-1 rounded transition-colors cursor-pointer ${
                                    copiedUid === club.uid
                                      ? 'text-green-600 bg-green-100 dark:text-green-400 dark:bg-green-900/20'
                                      : 'text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                                  }`}
                                  title={copiedUid === club.uid ? "Copied!" : "Copy UID to clipboard"}
                                >
                                  {copiedUid === club.uid ? (
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                    </svg>
                                  ) : (
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                    </svg>
                                  )}
                                </button>
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                                club.status === 'present' ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' :
                                club.status === 'absent' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100' :
                                club.status === 'banned' ? 'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100' :
                                club.status === 'inactive' ? 'bg-gray-100 text-gray-800 dark:bg-gray-600 dark:text-gray-100' :
                                'bg-gray-100 text-gray-800 dark:bg-gray-600 dark:text-gray-100'
                              }`}>
                                {club.status}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                              {new Date(club.created_at).toLocaleDateString()}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              <div className="flex space-x-2">
                                <button
                                  onClick={() => handleEditClick(index)}
                                  className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200 p-2 rounded hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors cursor-pointer"
                                  title="Edit club"
                                >
                                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                  </svg>
                                </button>
                                <button
                                  onClick={() => handleDeleteClick(index)}
                                  className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-200 p-2 rounded hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors cursor-pointer"
                                  title="Delete club"
                                >
                                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                  </svg>
                                </button>
                              </div>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* Delete Confirmation Modal */}
      {deleteModal.isOpen && (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
              Delete Club
            </h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6">
              Are you sure you want to delete club &quot;{deleteModal.clubName}&quot;? This action cannot be undone.
            </p>
            <div className="flex justify-end space-x-3">
              <button
                onClick={handleDeleteCancel}
                className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleDeleteConfirm}
                className="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 transition-colors"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Modal */}
      {editModal.isOpen && (
        <div className="fixed inset-0 bg-black/25 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
              Edit Club
            </h3>
            <form onSubmit={(e) => { e.preventDefault(); handleEditConfirm(); }} className="space-y-4">
              <div>
                <label htmlFor="edit-displayName" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Club Name
                </label>
                <input
                  type="text"
                  id="edit-displayName"
                  name="displayName"
                  value={editModal.formData.displayName}
                  onChange={handleEditInputChange}
                  required
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white sm:text-sm"
                  placeholder="Enter club name"
                />
              </div>

              <div>
                <label htmlFor="edit-status" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Status
                </label>
                <select
                  id="edit-status"
                  name="status"
                  value={editModal.formData.status}
                  onChange={handleEditInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white sm:text-sm"
                >
                  <option value="unknown">Unknown</option>
                  <option value="present">Present</option>
                  <option value="absent">Absent</option>
                  <option value="banned">Banned</option>
                  <option value="inactive">Inactive</option>
                </select>
              </div>

              <div className="flex justify-end space-x-3 pt-4">
                <button
                  type="button"
                  onClick={handleEditCancel}
                  className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors"
                >
                  Save Changes
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}